" Title: .vimrc
" Author: Vincevrp | github.com/Vincevrp

" Initial setup {{{
syntax on
set viminfo+=n~/.vim/viminfo
" }}}

" Plugins {{{
call plug#begin('~/.vim/plugged')
" Essential
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'

" Looks
Plug 'arcticicestudio/nord-vim'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'maximbaz/lightline-trailing-whitespace'

" Tools
Plug 'w0rp/ale'
Plug 'ajh17/VimCompletesMe'
Plug 'mattn/emmet-vim'
Plug 'junegunn/goyo.vim'
Plug 'takac/vim-hardtime'

" Languages and syntax
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'cakebaker/scss-syntax.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'nikvdp/ejs-syntax'
" Markdown
Plug 'plasticboy/vim-markdown'
Plug 'shime/vim-livedown', { 'do': 'sudo npm install -g livedown' }
" LaTeX
Plug 'lervag/vimtex'
call plug#end()
" }}}

" Vim behaviour {{{
set expandtab                       " Expand tab character to spaces
set softtabstop=4                   " Set columns to 0 for tabs
set shiftwidth=4                    " Make indent correspond to 4 spaces
set smarttab                        " Enable smarttab
set number relativenumber           " Enable relative line numbers
set ignorecase                      " Ignore case when searching
set smartcase                       " Ignore if lowercase, otherwise don't
set hlsearch                        " Highlight search terms
set incsearch                       " Show search matches as you type
set scrolloff=999                   " Lines to keep above and below cursor
set showmatch                       " Show matching parenthesis
set mouse=                          " Mouse input (empty=disabled)
set timeoutlen=1000                 " Set mapping delay (Escape delay fix)
set ttimeoutlen=0                   " Set key code delay (Escape delay fix)
set encoding=utf-8                  " Enable UTF-8
set t_Co=256                        " Enable 256 color support
set showcmd                         " Show command while typing
set conceallevel=2                  " Enable concealing
set foldmethod=marker               " Enable folding
set wrap                            " Enable visual word wrap
set linebreak                       " Only wrap at breakat characters
set breakindent                     " Indent breaks
set showbreak=↪\                    " Display ↪\ in front of wrapped lines
set splitbelow                      " Open horizontal split below
set cursorline                      " Highlight current line
set nrformats-=octal                " Remove octal numbers from increment
set wildmenu                        " Show wildmenu when using tab completion
set laststatus=2                    " Enable statusline
set noshowmode                      " Disable default mode indicator
set autochdir                       " Automatically change working directory
set undofile                        " Enable persistent undo
set undodir=~/.vim/undodir          " Set undodir
set ttyfast                         " Enable fast terminal connection
set lazyredraw                      " Only redraw when necessary
set list                            " Show listchars
set listchars=tab:▶▬                " Show tab characters
" }}}

" Autocmds and Filetypes {{{

" Augroup for filetype specific autocommands, may be declared below this point
augroup FTS
    autocmd!
    autocmd FTS FileType markdown set foldmethod=expr
augroup END

" Change indentation based on filetype
augroup FiletypeIndentation
    autocmd!
    autocmd FileType yaml,ruby,html,css,sass,scss call SetIndent(2)
augroup END

" Highlight trailing whitespace and TAB characters
augroup HighlightTrailingWhitespace
    autocmd!
    highlight TrailingWhitespace ctermbg=red guibg=red
    autocmd ColorScheme * highlight TrailingWhitespace ctermbg=red guibg=red
    match TrailingWhitespace /\s\+$/
    autocmd BufWinEnter * match TrailingWhitespace /\s\+$/
    autocmd InsertEnter * match TrailingWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match TrailingWhitespace /\s\+$/
    autocmd BufWinLeave * call clearmatches()
augroup END

augroup VimCompletesMeTex
    autocmd!
    autocmd FileType tex let b:vcm_omni_pattern = g:vimtex#re#neocomplete
augroup END
" }}}

" Functions and commands {{{

" Open help in new tab
cabbrev help tab help

" Write as sudo
command! W execute ":w !sudo tee %"

" Convert to unix line ending
function! DOS2Unix() abort
    edit ++ff=unix
    %s///g
endfun

function! SetIndent(num) abort
    execute "setlocal shiftwidth=".a:num
    execute "setlocal softtabstop=".a:num
endfun

" Ranger file explorer
function! Ranger() abort
    let l:file = "/tmp/vim-ranger"
    execute "silent !ranger --choosefile=".l:file
    if filereadable(l:file)
        execute 'edit'.system('<'.l:file.'&& rm '.l:file)
    endif
    redraw!
endfun

" Use appropriate FZF function
function! CheckFZF() abort
    let status = system('git rev-parse --is-inside-work-tree')
    execute status =~ 'true' ? 'GFiles' : 'Files'
endfun

function! ToggleColorColumn() abort
    execute "set colorcolumn=". (&colorcolumn == "" ? "80" : "")
endfun

function! ToggleQuickFix() abort
    for i in range(1, winnr('$'))
        if getbufvar(winbufnr(i), '&buftype') == 'quickfix'
            cclose
            return
        endif
    endfor

    copen
endfunction
" }}}

" Keybindings {{{
let mapleader=","

" Add J and K motions to jumplist
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" Ctrl-keybindings
nnoremap <silent> <C-h> <C-W>h
nnoremap <silent> <C-j> <C-W>j
nnoremap <silent> <C-k> <C-W>k
nnoremap <silent> <C-l> <C-W>l
nnoremap <silent> <C-n> :tabnext<CR>
nnoremap <silent> <C-e> 2<C-e>
nnoremap <silent> <C-y> 2<C-y>
nnoremap <silent> <C-s> :%s/\s\+$//e<CR>
nnoremap <silent> <C-m> :nohlsearch<CR>
nnoremap <silent> <C-p> :call CheckFZF()<cr>

" Leader-keybindings
nnoremap <silent> <leader><C-p> :Files<cr>
nnoremap <silent> <leader><S-r> :so ~/.vim/vimrc<CR>
nnoremap <silent> <leader><S-n> :cprevious<CR>
nnoremap <silent> <leader><leader> <C-^>
nnoremap <silent> <leader>t :tabnew<CR>
nnoremap <silent> <leader>h :new<CR>
nnoremap <silent> <leader>v :vnew<CR>
nnoremap <silent> <leader>l :Buffers<CR>
nnoremap <silent> <leader>n :cnext<CR>
nnoremap <silent> <leader>g :Goyo<CR>
nnoremap <silent> <leader>q :terminal<CR>
nnoremap <silent> <leader>f :Explore<CR>
nnoremap <silent> <leader>r :call Ranger()<CR>
nnoremap <silent> <leader>e :call ToggleQuickFix()<CR>
nnoremap <silent> <leader>w :call ToggleColorColumn()<CR>
nnoremap <silent> <leader>x :call system('xclip -selection clipboard', @0)<CR>

" F-keys
nnoremap <silent> <F1> :set nospell<CR>
nnoremap <silent> <F2> :set spell spelllang=en_us<CR>
nnoremap <silent> <F3> :set spell spelllang=nl<CR>
nnoremap <silent> <F4> :call DOS2Unix()<CR>

" Plugin mappings
map  <Space> <Plug>(easymotion-bd-w)
imap <C-j>   <Plug>vim_completes_me_forward
imap <C-k>   <Plug>vim_completes_me_backward
nmap ga      <Plug>(EasyAlign)
xmap ga      <Plug>(EasyAlign)

" Filetype specific
autocmd FTS FileType tex      nnoremap <silent> <leader>c :VimtexCompile<CR>
autocmd FTS FileType tex      nnoremap <silent> <leader>p :VimtexView<CR>
autocmd FTS FileType html     nnoremap <silent> <leader>p :!firefox %<CR><CR>
autocmd FTS FileType markdown nnoremap <silent> <leader>p :LivedownToggle<CR>
" }}}

" Plugin settings {{{

" Nord colorscheme {{{
let g:nord_italic=1
let g:nord_italic_comments=1
let g:nord_uniform_diff_background=1
colorscheme nord
" }}}

" Markdown {{{
let g:vim_markdown_folding_style_pythonic=1
let g:vim_markdown_frontmatter=1
let g:vim_markdown_new_list_item_indent = 0

" Livedown
let g:livedown_autorun=0
let g:livedown_open=1
let g:livedown_port=4444
let g:livedown_browser="firefox"
" }}}

" VimTex {{{
let g:vimtex_view_method = 'mupdf'
" }}}

" Easymotion {{{
let g:EasyMotion_do_mapping=0
" }}}

" Netrw {{{
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 25
" }}}

" FZF {{{
let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-h': 'split',
    \ 'ctrl-v': 'vsplit' }
" }}}

" Emmet {{{
let g:user_emmet_leader_key='<leader>H'
" }}}

" ALE {{{
let g:ale_completion_enabled = 1
let g:ale_lint_on_text_changed="normal"
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
" }}}

" VimCompletesMe {{{
let g:vcm_default_maps = 0
" }}}

" Hardtime {{{
let g:hardtime_default_on = 1
let g:hardtime_timeout = 500
" }}}
" }}}
